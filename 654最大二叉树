题目描述：
给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

二叉树的根是数组中的最大元素。
左子树是通过数组中最大值左边部分构造出的最大二叉树。
右子树是通过数组中最大值右边部分构造出的最大二叉树。
通过给定的数组构建最大二叉树，并且输出这个树的根节点。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

参考：labuladong手把手带你刷二叉树（第二期）

Python代码：
# Definition for a binary tree node.
import sys
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        return self.build(nums,0,len(nums)-1)
        

    def build(self,nums,lo,hi):
        if lo>hi:
            return None
        # 找到数组中最大值和对应的索引
        index = -1
        maxVal = -sys.maxsize-1
        i=lo
        while i<=hi:
            if maxVal<nums[i]:
                index = i
                maxVal = nums[i]
            i=i+1
        root = TreeNode(maxVal)
        #   递归调用构造左右子树
        root.left = self.build(nums,lo,index-1)
        root.right =self.build(nums,index+1,hi)

        return root

java代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return build(nums,0,nums.length-1);
    }
    TreeNode build(int[] nums, int lo,int hi){
        if(lo>hi)
            return null;
        int maxVal = Integer.MIN_VALUE;
        int index = 0;
        for(int i=lo;i<=hi;i++)
        {
            if(nums[i]>maxVal){
                maxVal = nums[i];
                index = i;
            }
        }
        TreeNode root = new TreeNode(maxVal);
        // 递归调用构造左右子树
        root.left = build(nums,lo,index-1);
        root.right = build(nums,index+1,hi);
        return root;
    }
}

